<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="UserMapper">
    <select id="selectIdCheck" resultType="User">
        SELECT USER_ID
        FROM USER_TBL
        WHERE USER_ID = #{id}
    </select>
    <select id="selectNickNameCheck" resultType="User">
        SELECT USER_NICKNAME
        FROM USER_TBL
        WHERE USER_NICKNAME = #{nickName}
    </select>
    <select id="findByUserId" resultType="User">
        SELECT *
        FROM USER_TBL
        WHERE USER_ID = #{userId}
    </select>
    <select id="findByUserNo" resultType="Role">
        SELECT *
        FROM ROLE_TBL
        WHERE USER_NO = #{userNo}
    </select>
<!-- 유저 마이페이지 데이터 -->
    <select id="selectUserLevel" resultType="UserMyPageData">
        SELECT L.LEVEL_NO, L.LEVEL_MIN_POINT, L.LEVEL_MAX_POINT,O.PROFILE_PIC_PATH,
        COALESCE(O.PAYMENT, 0) AS PAYMENT,
        COALESCE(O.READY, 0) AS READY,
        COALESCE(O.LOGISTIC, 0) AS LOGISTIC,
        COALESCE(O.COMPLETE, 0) AS COMPLETE,
        COALESCE(O.POINT_VAL, 0) AS POINT_VAL
        FROM (
        SELECT LEVEL_NO, LEVEL_MIN_POINT, LEVEL_MAX_POINT
        FROM LEVEL_TBL
        WHERE LEVEL_MIN_POINT  <![CDATA[<]]>  (
        SELECT USER_LEVEL_POINT
        FROM USER_TBL
        WHERE USER_NO = #{levelNo}
        )
        ORDER BY LEVEL_MIN_POINT DESC
        )  L
        LEFT JOIN (
        SELECT
        SUM(CASE WHEN ORDER_STATUS = 0 THEN 1 ELSE 0 END) AS PAYMENT,
        SUM(CASE WHEN ORDER_STATUS = 1 THEN 1 ELSE 0 END) AS READY,
        SUM(CASE WHEN ORDER_STATUS = 2 THEN 1 ELSE 0 END) AS LOGISTIC,
        SUM(CASE WHEN ORDER_STATUS = 3 THEN 1 ELSE 0 END) AS COMPLETE,
        P.POINT_VAL, PP.PROFILE_PIC_PATH
        FROM ORDER_DETAIL_TBL A
        FULL JOIN ORDER_TBL B ON A.ORDER_NO = B.ORDER_NO
        FULL JOIN POINT_TBL P ON P.USER_NO = B.USER_NO
        FULL JOIN PROFILE_TBL PP ON PP.USER_NO = P.USER_NO
        WHERE P.USER_NO = #{levelNo}
        GROUP BY P.POINT_VAL, PP.PROFILE_PIC_PATH
        ) O
        ON 1 = 1
        WHERE ROWNUM <![CDATA[<]]> = 1
    </select>

<!--    셀러 마이페이지 데이터 -->
    <select id="selectMyPageSeller" resultType="UserMyPageData">
        SELECT L.LEVEL_NO, L.LEVEL_MIN_POINT, L.LEVEL_MAX_POINT,O.PROFILE_PIC_PATH,
        COALESCE(O.PAYMENT, 0) AS PAYMENT,
        COALESCE(O.READY, 0) AS READY,
        COALESCE(O.LOGISTIC, 0) AS LOGISTIC,
        COALESCE(O.COMPLETE, 0) AS COMPLETE,
        COALESCE(O.POINT_VAL, 0) AS POINT_VAL
        FROM (
        SELECT LEVEL_NO, LEVEL_MIN_POINT, LEVEL_MAX_POINT
        FROM LEVEL_TBL
        WHERE LEVEL_MIN_POINT  <![CDATA[<]]>  (
        SELECT USER_LEVEL_POINT
        FROM USER_TBL
        WHERE USER_NO = #{levelNo}
        )
        ORDER BY LEVEL_MIN_POINT DESC
        )  L
        LEFT JOIN (
        SELECT
        SUM(CASE WHEN ORDER_STATUS = 0 THEN 1 ELSE 0 END) AS PAYMENT,
        SUM(CASE WHEN ORDER_STATUS = 1 THEN 1 ELSE 0 END) AS READY,
        SUM(CASE WHEN ORDER_STATUS = 2 THEN 1 ELSE 0 END) AS LOGISTIC,
        SUM(CASE WHEN ORDER_STATUS = 3 THEN 1 ELSE 0 END) AS COMPLETE,
        P.POINT_VAL, PP.PROFILE_PIC_PATH
        FROM ORDER_DETAIL_TBL A
        FULL JOIN POINT_TBL P ON P.USER_NO = A.SELLER_USER_NO
        FULL JOIN PROFILE_TBL PP ON PP.USER_NO = P.USER_NO
        WHERE P.USER_NO = #{levelNo} AND A.SELLER_USER_NO = #{levelNo}
        GROUP BY P.POINT_VAL, PP.PROFILE_PIC_PATH
        ) O
        ON 1 = 1
        WHERE ROWNUM <![CDATA[<]]> = 1
    </select>

<!-- 마이페이지 수정 데이터 로드 -->
    <select id="selectModifyUser" resultType="User">
        SELECT U.USER_NO, U.USER_ID , U.USER_NAME , U.USER_NICKNAME, P.PROFILE_PIC_PATH, U.USER_ID, U.USER_PHONE, U.USER_EMAIL
        FROM USER_TBL U
                 FULL JOIN PROFILE_TBL P ON U.USER_NO = P.USER_NO
        WHERE U.USER_NO = #{userNo}
    </select>

<!--     마이페이지 > 1:1 문의    -->
    <select id="selectQnaByUserNo" resultType="MyPageQna">
        SELECT * FROM QNA_TBL WHERE USER_NO = #{userNo} AND QNA_CATEGORY = 1 ORDER BY QNA_DATE DESC
    </select>

<!--    마이페이지 상품 문의 뷰  -->
    <select id="selectProductQna" resultType="MyPageQna">
        SELECT * FROM QNA_TBL WHERE USER_NO = #{userNo} AND QNA_CATEGORY = 2 ORDER BY QNA_DATE DESC
    </select>

<!--    마이페이지 문의 상세페이지 -->
    <select id="selectQnaDetail" resultType="MyPageQna">
        SELECT * FROM QNA_TBL FULL JOIN ANSWER_TBL ON QNA_ANSWER_NO = ANSWER_NO WHERE QNA_NO = #{qnaNo}
    </select>
<!-- 문의 삭제 -->
    <select id="deleteQna">
        DELETE FROM QNA_TBL WHERE QNA_NO = #{qnaNo}
    </select>
<!--    신고내역 리스트 가져오기 -->
    <select id="selectReportList" resultType="MyPageReportList">
        SELECT R.REPORT_NO, R.REPORT_CONTENT, RC.REPORT_CATEGORY_NAME, R.REPORT_TARGET_NAME, R.REPORT_PROCESSING, TO_CHAR(R.REPORT_DATE, 'YYYY-MM-DD HH24:mi:ss') AS REPORT_DATE
        FROM REPORT_TBL R
                 JOIN REPORT_CATEGORY_TBL RC ON R.REPORT_CATEGORY_NO = RC.REPORT_CATEGORY_NO
                 JOIN USER_TBL U ON R.REPORT_USER = U.USER_NO
        WHERE R.REPORT_USER = #{userNo}
    </select>

<!--    내가쓴댓글 리스트 로딩 -->
    <select id="selectCommentList" resultType="CommentList">
        SELECT C.* , CC.COMMUNITY_SUBJECT
        FROM COMMENT_TBL C
        JOIN COMMUNITY_TBL CC ON C.COMMUNITY_NO = CC.COMMUNITY_NO
        WHERE C.USER_NO = #{userNo}
    </select>

    <!-- 유저 등록 -->
    <insert id="insertUserByUser" parameterType="User">
        INSERT INTO USER_TBL
        VALUES (SEQ_USER_NO.NEXTVAL, #{userId}, #{userPw}, #{userName}, #{userNickName}, #{userEmail}, #{userPhone},
                SYSTIMESTAMP, 1, DEFAULT, DEFAULT, DEFAULT, DEFAULT)
    </insert>

    <insert id="insertUserByRole" parameterType="User">
        INSERT INTO ROLE_TBL (USER_NO, USER_ROLE)
        SELECT USER_NO, 'ROLE_USER'
        FROM USER_TBL
        WHERE USER_ID = #{userId}
    </insert>

    <!--   셀러 등록 -->
    <insert id="insertUserBySeller" parameterType="User">
        INSERT INTO USER_TBL
        VALUES (SEQ_USER_NO.NEXTVAL, #{userId}, #{userPw}, #{userName}, #{userNickName}, #{userEmail}, #{userPhone},
                SYSTIMESTAMP, 2, DEFAULT, DEFAULT, DEFAULT, DEFAULT)
    </insert>
    <insert id="insertSellerByRole" parameterType="User">
        INSERT INTO ROLE_TBL (USER_NO, USER_ROLE)
        SELECT USER_NO, 'ROLE_MANAGER'
        FROM USER_TBL
        WHERE USER_ID = #{userId}
    </insert>

<!-- 배송지 추가 -->
    <insert id="insertAddressByUser" parameterType="Address">
        INSERT INTO ADDRESS_TBL VALUES (SEQ_ADDRESS_NO.NEXTVAL, #{userNo}, #{addressZipCode},#{addressName},#{addressJibunDetail},#{addressJibun},#{addressPickup},#{addressPhone})
    </insert>

<!--    문의사항 작성 -->
    <insert id="qnaWrite">
        INSERT INTO QNA_TBL VALUES(SEQ_QNA_NO.nextval, #{qnaContent}, 1, #{userNo},NULL,default,default,SEQ_ANSWER_NO.NEXTVAL,#{qnaPic1, jdbcType=VARCHAR},#{qnaPic2, jdbcType=VARCHAR } )
    </insert>

<!-- 배송지 리스트 가져오기 -->
    <select id="selectAddressList" resultType="Address">
        SELECT * FROM ADDRESS_TBL WHERE USER_NO = #{userNo}
    </select>

<!--    유저 아이디 찾기 -->
    <select id="findUserId" resultType="string">
        SELECT USER_ID FROM USER_TBL WHERE USER_NAME = #{userName} AND USER_EMAIL = #{userEmail}
    </select>

<!--    유저 비밀번호 찾기 -->
    <select id="findUserPw" resultType="_int">
        SELECT COUNT(*) FROM USER_TBL WHERE USER_ID = #{userId} AND USER_EMAIL = #{userEmail}
    </select>

<!--   주문사항 조회 -->
    <select id="selectOrderList" resultType="MyPageOrderList">
        SELECT P.PRODUCT_NO, P.PRODUCT_NAME,PP.PRODUCT_PIC_1 , O.ORDER_DATE, O.ORDER_NO, D.ORDER_DETAIL_COUNT, D.ORDER_LOGIS, D.ORDER_TRACKING_NO, D.ORDER_STATUS, D.ORDER_PRICE, U.USER_NICKNAME, O.USER_NO, P.PRODUCT_BRAND
        FROM ORDER_DETAIL_TBL D
                 JOIN ORDER_TBL O ON O.ORDER_NO = D.ORDER_NO
                 FULL JOIN USER_TBL U ON U.USER_NO = D.SELLER_USER_NO
                 FULL JOIN PRODUCT_TBL P ON P.PRODUCT_NO = D.PRODUCT_NO
                 FULL JOIN PRODUCT_PIC_TBL PP ON PP.PRODUCT_NO = P.PRODUCT_NO
        WHERE O.USER_NO = #{userNo} AND
              ORDER_DATE BETWEEN #{startDate} and #{endDate}
    </select>

<!--    장바구니 뷰 -->
    <select id="selectCartList" resultType="CartList">
        SELECT P.PRODUCT_NAME, U2.USER_NICKNAME,PP.PRODUCT_PIC_1, P.PRODUCT_NO, C.PRODUCT_QUANTITY, U.USER_NO, P.PRODUCT_PRICE,P.PRODUCT_DELIVERY_CHARGE
        FROM CART_TBL C
                 JOIN USER_TBL U ON C.USER_NO = U.USER_NO
                 JOIN PRODUCT_TBL P ON P.PRODUCT_NO = C.PRODUCT_NO
                 JOIN USER_TBL U2 ON U2.USER_NO = P.SELLER_USER_NO
                 FULL JOIN PRODUCT_PIC_TBL PP ON P.PRODUCT_NO = PP.PRODUCT_NO
        WHERE C.USER_NO = #{userNo}
    </select>

    <!--    배송지 삭제 -->
    <delete id="deleteAddress" parameterType="_int">
        DELETE FROM ADDRESS_TBL WHERE ADDRESS_NO = #{addressNo}
    </delete>

    <delete id="deleteUser" parameterType="_int">
        DELETE FROM USER_TBL WHERE USER_NO = #{userNo}
    </delete>
<!--    장바구니 삭제 -->
    <delete id="deleteCartRemove">
        DELETE FROM CART_TBL WHERE USER_NO = #{userNo} AND PRODUCT_NO = #{productNo}
    </delete>

<!--    찜한 상품 삭제 -->
    <delete id="deleteFavorite">
        DELETE FROM FAVORITE_TBL WHERE USER_NO = #{userNo} AND PRODUCT_NO = #{productNo}
    </delete>

	<!-- 해당 상품을 구매해서 배송을 받은 회원인지 여부 -->
	<select id="checkCustomer" parameterType="_int" resultType="_int">
		SELECT COUNT(*) FROM USER_TBL
		JOIN ORDER_TBL USING (USER_NO)
		JOIN ORDER_DETAIL_TBL USING (ORDER_NO)
		WHERE PRODUCT_NO = #{productNo} AND ORDER_STATUS = 3
	</select>

<!--    like 상품 뷰 -->
    <select id="selectFavoriteList" resultType="Favorite">
    SELECT PP.PRODUCT_PIC_1, P.PRODUCT_NAME, P.PRODUCT_PRICE, P.PRODUCT_NO, P.PRODUCT_SALES
    FROM PRODUCT_TBL P
    FULL JOIN PRODUCT_PIC_TBL PP ON P.PRODUCT_NO = PP.PRODUCT_NO
    FULL JOIN FAVORITE_TBL F ON F.PRODUCT_NO = P.PRODUCT_NO
    WHERE F.USER_NO = #{userNo}
    </select>

<!--    커뮤니티 팩다운 -->
    <select id="selectPegDown" resultType="MPCommunityList">
        SELECT C.COMMUNITY_NO, C.COMMUNITY_SUBJECT, C.COMMUNITY_DATE, C.COMMUNITY_CATEGORY, S.SCRAP_DATE, S.USER_NO
        FROM COMMUNITY_TBL C
        JOIN SCRAP_TBL S ON S.COMMUNITY_NO = C.COMMUNITY_NO
        WHERE S.USER_NO = #{userNo}
        ORDER BY SCRAP_DATE DESC
    </select>

<!--    커뮤니티 내가 쓴글 -->
    <select id="selectMyWrite" resultType="MPCommunityList" parameterType="int">
        SELECT C.COMMUNITY_NO, C.COMMUNITY_SUBJECT,C.COMMUNITY_DATE, C.COMMUNITY_CATEGORY, U.USER_NO
        FROM COMMUNITY_TBL C
        JOIN USER_TBL U ON C.USER_NO = U.USER_NO
        WHERE U.USER_NO = #{userNo}
    </select>

<!-- 유저 정보 업데이트 -->
    <update id="updateMyPageUser" parameterType="User">
        UPDATE USER_TBL SET USER_NICKNAME = #{userNickName}, USER_PHONE = #{userPhone}, USER_EMAIL = #{userEmail} WHERE USER_ID = #{userId}
    </update>

    <select id="selectUpdateByUser" resultType="User">
        SELECT * FROM USER_TBL WHERE USER_ID = #{userId}
    </select>
    
    <select id="findUserInfoByUserNo" parameterType="_int" resultType="User">
		SELECT * FROM USER_TBL WHERE USER_NO = #{userNo}
	</select>

<!--    qna 수정 저장 -->
    <update id="updateQna">
        UPDATE QNA_TBL SET QNA_CONTENT = #{qnaContent} WHERE QNA_NO = #{qnaNo}
    </update>
<!--    장바구니 카운트 업 앤 다운 -->
    <update id="updateCartCountUpDown">
        UPDATE CART_TBL SET
                            <if test="productQuantity == 1">
                                PRODUCT_QUANTITY = PRODUCT_QUANTITY+1
                            </if>
                            <if test="productQuantity == -1">
                                PRODUCT_QUANTITY = PRODUCT_QUANTITY-1
                            </if>
                        WHERE USER_NO = #{userNo} AND PRODUCT_NO = ${productNo}
    </update>
<!--    프로필 사진 업데이트 -->
    <update id="updateProfilePic">
        UPDATE PROFILE_TBL SET PROFILE_PIC_PATH = #{profilePicPath} WHERE USER_NO = #{userNo}
    </update>
<!--   비밀번호 변경 -->
    <update id="changePw">
        UPDATE USER_TBL SET USER_PW = #{userPw} WHERE USER_ID = #{userId}
    </update>
</mapper>
